using PyCall, Twitter, HTTP

# JUMANPPをPyCall経由で
juman = pyimport("pyknp")
jumanpp = juman.Juman()

# グローバル辞書
gDict = Dict()

#=
 辞書を作る
=#
function createDic(dict::Dict, txt::AbstractString)
  # JUMAPで形態素解析
  words = jumanpp.analysis(txt)

  # 見出しの配列化（前後にBOS / EOSを入れる）
  words2 = []
  push!(words2, "BOS")
  for index in 1:length(words)
    push!(words2, get(words, index - 1).midasi)
  end
  push!(words2, "EOS")

  words = words2

  # ２ペアで辞書化
  elementCount = 2
  for index in 1:length(words) - elementCount
    key = getindex(words, index)
    value = getindex(words, index + 1)

    # println(key * " / " * value)

    if haskey(dict, key)
      dict[key] = push!(dict[key], value)
    else
      dict[key] = [value]
    end
  end

  return dict
end

#=
 辞書を使って文書生成する
=#
function markovtext(maxchlen::Integer, key::String)
  dict = gDict

  if haskey(dict, key) == false
    key = "BOS"
  end

  keytext = key
  valuetext = replace(rand(dict[keytext]), r"EOS" => "")
  outtext = "" # valuetext

  println("[$(keytext)] -> [$(valuetext)]")

  println("maxchlen = $(maxchlen)")

  brackets = 0
  while true
    outtext = outtext * keytext
    println("length) = $(length(outtext)) > $(maxchlen)")
    println("$( length(outtext) > maxchlen )")

    if length(outtext) > maxchlen
      println("Text length limitation.")
      break
    end

    if haskey(dict, keytext) == false
      println("[$(keytext)] not found...")
      break
    end
    keytext = rand(collect(dict[keytext]))
    print("[$(keytext)] -> ")

    # 括弧は一つにしたい
    if keytext == "（" || keytext == "("
      brackets = brackets + 1
    end

    # 終端探し
    if keytext == "EOS" || keytext == "。" || keytext == "！" || keytext == "？" || brackets > 1
      println("")
      break
    end

    if haskey(dict, keytext) == false
      outtext = outtext * keytext
      println("[$(keytext)] not found...")
      break
    end
    valuetext = rand(dict[keytext])

    println("[$(valuetext)]")

    if valuetext == "EOS" || valuetext == "。"
      #break
    end
  end

  outtext = replace(outtext, r"BOS" => "")

  return outtext
end

function corpus2Dic()
  @time for tweet in eachline("corpus.txt")
    # tweet = corpus[index]
    tweet = replace(tweet, r"(https?://t.co/[a-z0-9A-Z]+)|(@.+? )|(ξ.+?Ҙ)|([ -/:-@\[-~])|([ｦ-ﾟ])" => "")
    lines = split(tweet, "\n")

    for index in 1:length(lines)
      createDic(gDict, lines[index])
    end
  end
end

# Twitter認証
twitterauth(ENV["CONSUMER_KEY"], ENV["CONSUMER_SECRET"], ENV["ACCESS_TOKEN"], ENV["ACCESS_TOKEN_SECRET"])

### REST API ENDPOINT ###

# /mcmc
# QUERYPARAMS
#  p: post tweet
#  l: word limit
function mcmc(req::HTTP.Request)
  params = HTTP.queryparams(parse(HTTP.URI, req.target))

  limit = 130
  if haskey(params, "l") == true
    limit = parse(Int64, params["l"])
    println( "limit = $(limit)" )
  end

  @time gentext = markovtext(limit, "BOS") * "\n"

  if params["p"] == "1"
    println("tweet")
    gentext = "@pr \n" * gentext
    post_status_update(status = gentext)
  end

  res = HTTP.Response(200, gentext)
  push!(res.headers, "Access-Control-Allow-Origin" => "*")
  return res
end

# /reply
# QUERYPARAMS
#  p: post tweet
#  t: text
#  l: word limit
function reply(req::HTTP.Request)
  params = HTTP.queryparams(parse(HTTP.URI, req.target))

  text = String(params["t"])
  println( text )

  prefix = "@pr \n"
  connection = " -> "

  limit = 140
  if haskey(params, "l") == true
    limit = parse(Int64, params["l"])
    println( "limit = $(limit)" )
  end
  @time gentext = markovtext(limit, text) * "\n"

  if params["p"] == "1"
    reply = prefix * text * connection * gentext
    if (length(reply) > 140)
      reply = prefix * gentext
    end
    post_status_update(status = reply)
  end

  res = HTTP.Response(200, gentext)
  push!(res.headers, "Access-Control-Allow-Origin" => "*")
  return res
end

# /dictionary
# QUERYPARAMS
function dictionary(req::HTTP.Request)
  params = HTTP.queryparams(parse(HTTP.URI, req.target))

  corpus2Dic()

  return ""
end

### メイン処理 ###

println( "main.ji start" )

# 初回読み込み
corpus2Dic()

println( "Created dictionary" )

# エンドポイント作成
const ROUTER = HTTP.Router()
HTTP.@register(ROUTER, "POST", "/mcmc", mcmc)
HTTP.@register(ROUTER, "POST", "/reply", reply)
HTTP.@register(ROUTER, "POST", "/dict", dictionary)

HTTP.serve(ROUTER, "127.0.0.1", 8000)

println( "main.ji end" )

# @time gentext = markovtext(200, "BOS")

# println("")
# println(gentext)
